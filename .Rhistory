final[which(testPreds==TRUE&final$res2016==TRUE),]$pred = 0
final[which(testPreds==FALSE&final$res2016==FALSE),]$pred = 1
final[which(testPreds==TRUE&final$res2016==FALSE),]$pred = 2
final[which(testPreds==FALSE&final$res2016==TRUE),]$pred = 3
truetrue = final[which(testPreds==TRUE&final$res2016==TRUE),]
falsefalse = final[which(testPreds==FALSE&final$res2016==FALSE),]
truefalse = final[which(testPreds==TRUE&final$res2016==FALSE),]
falsetrue = final[which(testPreds==FALSE&final$res2016==TRUE),]
truetrue$pred = 1
falsefalse$pred = 2
truefalse$pred = 3
falsetrue$pred = 4
predfinal = data.frame(truetrue,falsefalse,truefalse,falsetrue)
truetrue = final[which(testPreds==TRUE&final$res2016==TRUE),]
falsefalse = final[which(testPreds==FALSE&final$res2016==FALSE),]
truefalse = final[which(testPreds==TRUE&final$res2016==FALSE),]
falsetrue = final[which(testPreds==FALSE&final$res2016==TRUE),]
truetrue$pred = 1
falsefalse$pred = 2
truefalse$pred = 3
falsetrue$pred = 4
predfinal = rbind(truetrue,falsefalse,truefalse,falsetrue)
View(predfinal)
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
summary(predfinal$pred)
ggplot(final)+geom_density(mapping = aes(x = neverMarriedMen,color = res2016))
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
ggplot(predfinal)+geom_line(mapping = aes(x = neverMarriedMen, color = pred))
ggplot(predfinal)+geom_histogram(mapping = aes(x = neverMarriedMen, color = pred))
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
predfinal$pred
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen), color = pred))
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen), color = pred)
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
sum(predfinal$pred==2)
sum(predfinal$pred==1)
sum(predfinal$pred==3)
sum(predfinal$pred==4)
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, fill = pred))
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
sep(1:100)
seq(1:100)
predfinal = rbind(truetrue,falsefalse[sep(1:100),],truefalse,falsetrue)
predfinal = rbind(truetrue,falsefalse[seq(1:100),],truefalse,falsetrue)
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
truetrue = final[which(testPreds==TRUE&final$res2016==TRUE),]
falsefalse = final[which(testPreds==FALSE&final$res2016==FALSE),]
truefalse = final[which(testPreds==TRUE&final$res2016==FALSE),]
falsetrue = final[which(testPreds==FALSE&final$res2016==TRUE),]
truetrue$pred = 1
falsefalse$pred = 2
truefalse$pred = 3
falsetrue$pred = 4
predfinal = rbind(truetrue,falsefalse[seq(1:100),],truefalse,falsetrue)
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
View(predfinal)
View(predfinal)
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, colour = pred))
predfinal = rbind(truetrue,falsefalse[seq(1:100),])
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
View(predfinal)
truetrue = final[which(testPreds==TRUE&final$res2016==TRUE),]
falsefalse = final[which(testPreds==FALSE&final$res2016==FALSE),]
truefalse = final[which(testPreds==TRUE&final$res2016==FALSE),]
falsetrue = final[which(testPreds==FALSE&final$res2016==TRUE),]
truetrue$pred = 1
falsefalse$pred = 2
truefalse$pred = 3
falsetrue$pred = 4
predfinal = rbind(truetrue,falsefalse[seq(1:200),])
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
truetrue = final[which(testPreds==TRUE&final$res2016==TRUE),]
falsefalse = final[which(testPreds==FALSE&final$res2016==FALSE),]
truefalse = final[which(testPreds==TRUE&final$res2016==FALSE),]
falsetrue = final[which(testPreds==FALSE&final$res2016==TRUE),]
truetrue$pred = 0
falsefalse$pred = 1
truefalse$pred = 3
falsetrue$pred = 4
predfinal = rbind(truetrue,falsefalse[seq(1:200),])
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
class(predfinal$pred)
truetrue = final[which(testPreds==TRUE&final$res2016==TRUE),]
falsefalse = final[which(testPreds==FALSE&final$res2016==FALSE),]
truefalse = final[which(testPreds==TRUE&final$res2016==FALSE),]
falsetrue = final[which(testPreds==FALSE&final$res2016==TRUE),]
truetrue$pred = TRUE
falsefalse$pred = FALSE
truefalse$pred = 3
falsetrue$pred = 4
predfinal = rbind(truetrue,falsefalse[seq(1:200),])
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
truetrue = final[which(testPreds==TRUE&final$res2016==TRUE),]
falsefalse = final[which(testPreds==FALSE&final$res2016==FALSE),]
truefalse = final[which(testPreds==TRUE&final$res2016==FALSE),]
falsetrue = final[which(testPreds==FALSE&final$res2016==TRUE),]
truetrue$pred = rightt
falsefalse$pred = rightf
truefalse$pred = wrongt
falsetrue$pred = wrongf
predfinal = rbind(truetrue,falsefalse[seq(1:200),])
truetrue = final[which(testPreds==TRUE&final$res2016==TRUE),]
falsefalse = final[which(testPreds==FALSE&final$res2016==FALSE),]
truefalse = final[which(testPreds==TRUE&final$res2016==FALSE),]
falsetrue = final[which(testPreds==FALSE&final$res2016==TRUE),]
truetrue$pred = "rightt"
falsefalse$pred = "rightf"
truefalse$pred = "wrongt"
falsetrue$pred = "wrongf"
predfinal = rbind(truetrue,falsefalse[seq(1:200),])
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
truetrue = final[which(testPreds==TRUE&final$res2016==TRUE),]
falsefalse = final[which(testPreds==FALSE&final$res2016==FALSE),]
truefalse = final[which(testPreds==TRUE&final$res2016==FALSE),]
falsetrue = final[which(testPreds==FALSE&final$res2016==TRUE),]
truetrue$pred = "rightt"
falsefalse$pred = "rightf"
truefalse$pred = "wrongt"
falsetrue$pred = "wrongf"
predfinal = rbind(truetrue,falsefalse,truefalse,falsetrue)
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
truetrue = final[which(testPreds==TRUE&final$res2016==TRUE),]
falsefalse = final[which(testPreds==FALSE&final$res2016==FALSE),]
truefalse = final[which(testPreds==TRUE&final$res2016==FALSE),]
falsetrue = final[which(testPreds==FALSE&final$res2016==TRUE),]
truetrue$pred = "righttrue"
falsefalse$pred = "rightfalse"
truefalse$pred = "wrongtrue"
falsetrue$pred = "wrongfalse"
predfinal = rbind(truetrue,falsefalse,truefalse,falsetrue)
ggplot(predfinal)+geom_density(mapping = aes(x = neverMarriedMen, color = pred))
finalTree
ggplot(predfinal)+geom_density(mapping = aes(x = marriedcouple, color = pred))
ggplot(predfinal)+geom_density(mapping = aes(x = marriedcouples, color = pred))
ggplot(predfinal)+geom_density(mapping = aes(x = totalPop, color = pred))
ggplot(predfinal)+geom_density(mapping = aes(x = professionalIndustries, color = pred))
ggplot(predfinal)+geom_density(mapping = aes(x = marriedcouples, color = pred))
library(rpart.plot)
prp(finalTree, extra = 2)
ggplot(predfinal)+geom_density(mapping = aes(x = laborForce, color = pred))
library(rpart.plot)
prp(finalTree, extra = 2)
ggplot(predfinal)+geom_density(mapping = aes(x = laborForce, color = pred))
?theme()
library(rpart.plot)
prp(finalTree, extra = 2)
ggplot(predfinal)+geom_density(mapping = aes(x = laborForce, color = pred))
setwd("C:/Cathy sun's application/berkeley/133computing data/STAT133_P2_ELECTION")
load("finalDataFrame.rda")
View(final)
View(final)
final$res2016 = final$ClintonVote2016>final$TrumpVote2016
final = final[,-seq(1:12))]
final$res2016 = final$ClintonVote2016>final$TrumpVote2016
final = final[,-seq(1:12)]
View(final)
# Chunk 1
load("finalDataFrame.rda")
# Chunk 2
final$res2016 = final$ClintonVote2016>final$TrumpVote2016
final = final[,-seq(1:12)]
# Chunk 3
nTotal = nrow(final)
chooseTest = sample(nTotal, size = 404, replace = FALSE)
finalTest = final[chooseTest, ]
finalTrain = final[ -chooseTest, ]
# Chunk 4
set.seed(12344321)
permuteIndices = sample(2700)
v = 3
folds = matrix(permuteIndices,ncol = 3)
# Chunk 5
cps = c(seq(0.0001, 0.001, by = 0.0001),
seq(0.001, 0.01, by = 0.001),
seq(0.01, 0.1, by = 0.01))
preds = matrix(nrow = 2700, ncol = length(cps))
library(rpart)
for (i in 1:v) {
trainFold = as.integer(folds[, -i])
testFold = folds[, i]
for (j in 1:length(cps)) {
tree = rpart(res2016 ~ .,
data = finalTrain[trainFold,],
method = "class",
control = rpart.control(cp = cps[j]))
#preds[testFold,j] = knn(finalTrain[trainFold,],finalTest[testFold,],res2016 ~ .,3,prob = TRUE)
preds[testFold,j] =
predict(tree,
newdata = finalTrain[testFold,-length(testFold)],
type = "class")
}
}
# Chunk 6
cvRates = apply(preds, 2, function(oneSet) {
oneSet[which(oneSet == 1)] = "FALSE"
oneSet[which(oneSet == 2)] = "TRUE"
sum(finalTrain$res2016 == oneSet)/2700
})
# Chunk 7
which.max(cvRates)
library(ggplot2)
cvRes = data.frame(cps, cvRates)
ggplot(data = cvRes, aes(x = cps, y = cvRates)) +
geom_line() +
labs(x = "Complexity Parameter", y = "Classification Rate")
# Chunk 8
cpChoice = cvRes[which.max(cvRates)+5,1]
finalTree = rpart(res2016 ~ .,
data = final,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = final[,-31],
type = "class")
classRate = sum(testPreds == final$res2016) /
nrow(final)
classRate
# Chunk 9
library(rpart.plot)
prp(finalTree, extra = 2)
# Chunk 10
truetrue = final[which(testPreds==TRUE&final$res2016==TRUE),]
falsefalse = final[which(testPreds==FALSE&final$res2016==FALSE),]
truefalse = final[which(testPreds==TRUE&final$res2016==FALSE),]
falsetrue = final[which(testPreds==FALSE&final$res2016==TRUE),]
truetrue$pred = "righttrue"
falsefalse$pred = "rightfalse"
truefalse$pred = "wrongtrue"
falsetrue$pred = "wrongfalse"
predfinal = rbind(truetrue,falsefalse,truefalse,falsetrue)
# Chunk 11
ggplot(predfinal)+geom_density(mapping = aes(x = laborForce, color = pred))
library(rpart.plot)
prp(finalTree, extra = 2)
cpChoice = cvRes[which.max(cvRates)+3,1]
finalTree = rpart(res2016 ~ .,
data = final,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = final[,-31],
type = "class")
classRate = sum(testPreds == final$res2016) /
nrow(final)
classRate
library(rpart.plot)
prp(finalTree, extra = 2)
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = final,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = final[,-31],
type = "class")
classRate = sum(testPreds == final$res2016) /
nrow(final)
classRate
library(rpart.plot)
prp(finalTree, extra = 2)
ggplot(predfinal)+geom_density(mapping = aes(x = laborForce, color = pred))
library(class)
?knn
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = finalTest,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = finalTest[,-31],
type = "class")
classRate = sum(testPreds == finalTest$res2016) /
nrow(final)
classRate
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = finalTest,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = finalTest[,-31],
type = "class")
classRate = sum(testPreds == finalTest$res2016) /
nrow(finalTest)
classRate
library(rpart.plot)
prp(finalTree, extra = 2)
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = finalTrain,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = finalTest[,-31],
type = "class")
classRate = sum(testPreds == finalTest$res2016) /
nrow(finalTest)
classRate
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = finalTrain,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = finalTest[,-31],
type = "class")
classRate = sum(testPreds == finalTest$res2016) / nrow(finalTest)
classRate
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = finalTrain,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = finalTest[,-31],
type = "class")
classRate = sum(testPreds == finalTest$res2016) / nrow(finalTest)
classRate
testPreds
LENGTH(testPreds)
length(testPreds)
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = final,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = final[,-31],
type = "class")
classRate = sum(testPreds == final$res2016) / nrow(final)
classRate
library(ggplot2)
cvRes = data.frame(cps, cvRates)
ggplot(data = cvRes, aes(x = cps, y = cvRates)) +
geom_line() +
labs(x = "Complexity Parameter", y = "Classification Rate")
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = finaltest,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = final[,-31],
type = "class")
classRate = sum(testPreds == final$res2016) / nrow(final)
classRate
# Chunk 1
load("finalDataFrame.rda")
# Chunk 2
final$res2016 = final$ClintonVote2016>final$TrumpVote2016
final = final[,-seq(1:12)]
# Chunk 3
nTotal = nrow(final)
chooseTest = sample(nTotal, size = 1104, replace = FALSE)
finalTest = final[chooseTest, ]
finalTrain = final[ -chooseTest, ]
# Chunk 4
set.seed(12344321)
permuteIndices = sample(2000)
v = 2
folds = matrix(permuteIndices,ncol = 2)
# Chunk 5
cps = c(seq(0.0001, 0.001, by = 0.0001),
seq(0.001, 0.01, by = 0.001),
seq(0.01, 0.1, by = 0.01))
preds = matrix(nrow = 2000, ncol = length(cps))
library(rpart)
for (i in 1:v) {
trainFold = as.integer(folds[, -i])
testFold = folds[, i]
for (j in 1:length(cps)) {
tree = rpart(res2016 ~ .,
data = finalTrain[trainFold,],
method = "class",
control = rpart.control(cp = cps[j]))
preds[testFold,j] =
predict(tree,
newdata = finalTrain[testFold,-length(testFold)],
type = "class")
}
}
# Chunk 6
cvRates = apply(preds, 2, function(oneSet) {
oneSet[which(oneSet == 1)] = "FALSE"
oneSet[which(oneSet == 2)] = "TRUE"
sum(finalTrain$res2016 == oneSet)/2700
})
# Chunk 7
library(ggplot2)
cvRes = data.frame(cps, cvRates)
ggplot(data = cvRes, aes(x = cps, y = cvRates)) +
geom_line() +
labs(x = "Complexity Parameter", y = "Classification Rate")
# Chunk 8
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = finalTrain,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = finalTest[,-31],
type = "class")
classRate = sum(testPreds == final$res2016) / nrow(final)
classRate
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = finaltrain,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = final[,-31],
type = "class")
classRate = sum(testPreds == final$res2016) / nrow(final)
classRate
# Chunk 1
load("finalDataFrame.rda")
# Chunk 2
final$res2016 = final$ClintonVote2016>final$TrumpVote2016
final = final[,-seq(1:12)]
# Chunk 3
nTotal = nrow(final)
chooseTest = sample(nTotal, size = 404, replace = FALSE)
finalTest = final[chooseTest, ]
finalTrain = final[ -chooseTest, ]
# Chunk 4
set.seed(12344321)
permuteIndices = sample(2700)
v = 3
folds = matrix(permuteIndices,ncol = 3)
# Chunk 5
cps = c(seq(0.0001, 0.001, by = 0.0001),
seq(0.001, 0.01, by = 0.001),
seq(0.01, 0.1, by = 0.01))
preds = matrix(nrow = 2700, ncol = length(cps))
library(rpart)
for (i in 1:v) {
trainFold = as.integer(folds[, -i])
testFold = folds[, i]
for (j in 1:length(cps)) {
tree = rpart(res2016 ~ .,
data = finalTrain[trainFold,],
method = "class",
control = rpart.control(cp = cps[j]))
preds[testFold,j] =
predict(tree,
newdata = finalTrain[testFold,-length(testFold)],
type = "class")
}
}
# Chunk 6
cvRates = apply(preds, 2, function(oneSet) {
oneSet[which(oneSet == 1)] = "FALSE"
oneSet[which(oneSet == 2)] = "TRUE"
sum(finalTrain$res2016 == oneSet)/2700
})
library(ggplot2)
cvRes = data.frame(cps, cvRates)
ggplot(data = cvRes, aes(x = cps, y = cvRates)) +
geom_line() +
labs(x = "Complexity Parameter", y = "Classification Rate")
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = finaltest,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = final[,-31],
type = "class")
classRate = sum(testPreds == final$res2016) / nrow(final)
classRate
cpChoice = cvRes[which.max(cvRates)+2,1]
finalTree = rpart(res2016 ~ .,
data = finalTest,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = final[,-31],
type = "class")
classRate = sum(testPreds == final$res2016) / nrow(final)
classRate
rand(10)
runif(10)
rand = sample(1:3104,2000)
rand
cpChoice = cvRes[which.max(cvRates)+2,1]
rand = sample(1:3104,2000)
finaltraindf = final[rand,]
finalTree = rpart(res2016 ~ .,
data = finaltraindf,
method = "class",
control = rpart.control(cp = cpChoice))
#finalTree = knn(finalTrain,finalTest,res2016,3,prob = TRUE)
testPreds = predict(finalTree,
newdata = final[,-31],
type = "class")
classRate = sum(testPreds == final$res2016) / nrow(final)
classRate
